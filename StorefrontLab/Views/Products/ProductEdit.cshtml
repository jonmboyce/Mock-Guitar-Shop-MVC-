@model StorefrontLab.Data.EF.Product

@{ 
    ViewBag.Title = "Edit";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("", "", FormMethod.Post, new { id = "ProductEditForm" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ProductID)

        <div class="form-group">
            @Html.LabelFor(model => model.ManufacturerID, "ManufacturerID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ManufacturerID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ManufacturerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InventoryStatusID, "InventoryStatusID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("InventoryStatusID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.InventoryStatusID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SerialNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SerialNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductImage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductImage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-6">
                <input type="submit" value="Update" class="main-button" />
            </div>
            <div class="col-md-6 text-right">
                @Html.ActionLink("Cancel", "Index", null, new { @class="text-danger"})
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    //process the form
    $('ProductEditForm').submit(function (e) {
        //works like the create in the publishers index
        e.preventDefault();
        var formData = $(this).serializeArray();
        $('#MessageContet').html("<div class='alert alert-info'>Please wait..</div>");

        $.ajax({
            url: '@Url.Action("ProductEdit", "Products")',
            type: 'POST',
            data: formData,
            dataType: 'json',
            success: function (data) {
                $('#MessageContent').html("<div class='alert alert-info'>Your record was updated successfully!</div>");
                $('#ProductEditForm')[0]reset();
                //Update the row information
                $(function () {
                    var row = '<tr><td>' + data.ProductName
                        + '</td><td>' + data.InventoryStatusID
                        + '</td><td>' + data.CategoryID
                        + '</td><td>' + data.Color
                        + '</td><td>' + data.Description
                        + '</td><td>' + data.SerialNumber
                        + '</td><td>' + data.Price
                        + '</td><td>' + data.ProductImage
                        + '</td><td></td><td>Refresh to view options </td> <tr>'; //buttons are not available for the new item and this all seems like it needs to go to the index
                    $('#Product-' + data.ProductID).replaceWith(row);

                });
                $('ProductEdit').dialog('close');
            },
            error: function (e) {
                $('#MessageContent').html("<div class='alert alert-success'>There was an error. " +
                    "Please try again or contact the site administrator.</div>")
            }
        });
    });
</script>